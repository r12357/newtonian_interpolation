ニュートン補間可視化ツール 要件定義書

1. 概要

1.1. プロジェクトの目的

本プロジェクトは、差分商を用いたニュートン形式の多項式補間について、そのアルゴリズムと性質を直感的・視覚的に理解することを目的とする。具体的には、ユーザーが指定した関数に対し、補間多項式が逐次的に構築され、元の関数に近似していく過程や、差分商の計算プロセスをアニメーションで可視化する動的なWebアプリケーションを開発する。

1.2. ターゲットユーザー

数値解析、関数近似論を学ぶ学生や研究者

補間アルゴリズムの挙動を視覚的に理解したいエンジニア

数学教育に携わる教員

1.3. 期待される効果

差分商とニュートン補間多項式の関係性の直感的な理解。

補間次数を上げると、補間多項式がどのように関数に収束（または発散）していくかの視覚的体験。

差分商の幾何学的な意味合いの学習。

チェビシェフ節点の有効性の（間接的な）確認。

2. 機能要件

2.1. 画面レイアウト

アプリケーションは、画面を左右に分割したレイアウトを採用する。

左ペイン（操作パネル）: ユーザーが補間のパラメータを入力し、アニメーションを制御するためのインターフェースを配置する。

右ペイン（描画エリア）: 計算結果を視覚的に表示する。このエリアはさらに上下に分割する。

上部: グラフ表示エリア。元の関数、補間多項式、補間誤差をプロットする。

下部: 差分商表エリア。

2.2. 操作パネル (左ペイン)

以下のユーザー入力と制御機能を持つ。

機能UIコンポーネント説明関数入力

テキスト入力フィールド

JavaScriptのMathオブジェクトで解釈可能な形式で、ユーザーが任意の関数 f(x) を入力できる。（例: sin(x), 1 / (1 + 25*x*x), x**3 - 2*x + 1）

補間区間

2つの数値入力 (開始点, 終了点)

補間を行う区間 [a,b] を指定する。デフォルトは [−1,1]。

節点数

スライダーまたは数値入力

補間点の数 n+1 を指定する。次数 n がこれに対応する。

アニメーション制御

ボタン (再生/一時停止, リセット)

可視化アニメーションの制御を行う。

アニメーション速度

スライダー

アニメーションの再生速度を調整できる。

2.3. 描画エリア (右ペイン)

2.3.1. グラフエリア

2つのグラフを並べて表示する。

関数・補間多項式グラフ:

背景: 指定された区間で、ユーザーが入力した元の関数 f(x) を青線で描画する。

補間多項式: アニメーションの進行に合わせて、ニュートン補間多項式 p_k(x) を緑線で描画する。k が増加するにつれて、グラフが更新されていく様子を見せる。

節点: 差分商の計算ステップと連動して、関連する節点を赤点で強調表示する。

幾何学的解釈: 差分商の計算ステップと連動して、その幾何学的意味（直線や放物線など）を赤色の破線で一時的に描画する（詳細は後述）。

補間誤差グラフ:

誤差関数 E(x)=f(x)−p_n(x) をプロットする。

補間多項式が完成した最終ステップで表示する。

2.3.2. 差分商表エリア

HTMLの<table>要素で差分商表を動的に生成する。

節点はチェビシェフ節点 x_k=cosleft(frac(2k+1)pi2(n+1)right) （区間 [−1,1] の場合）を計算して使用する。

アニメーションと連動し、計算の進行状況をセルの背景色で示す。

計算中: 明るい緑色

計算完了直後: 薄い灰色

次々回の計算へ移行後: 通常色に戻る

2.4. アニメーションシーケンス

「再生」ボタンを押すと、以下のシーケンスがステップバイステップで実行される。

初期状態: 元の関数グラフと、空の差分商表が表示される。

Step 0 (0階差分商):

差分商表: f[x_0],f[x_1],dots,f[x_n] の列を計算。計算中のセルをハイライト。

グラフ: 対応する節点 (x_i,y_i) を赤点でプロット。

Step 1 (1階差分商):

差分商表: f[x_0,x_1],f[x_1,x_2],dots の列を計算。計算中のセルをハイライト。

グラフ: 最初の係数 f[x_0,x_1] が確定した時点で、1次補間多項式 p_1(x)=f[x_0]+f[x_0,x_1](https://www.google.com/search?q=x−x0

​) をプロット。

Step k (k階差分商):

差分商表: f[x_0,dots,x_k],dots の列を計算。

グラフ: 係数 f[x_0,dots,x_k] が確定した時点で、k次補間多項式 p_k(x)=p_k−1(x)+f[x_0,dots,x_k]prod_i=0k−1

(x−x_i) をプロットし、前の次数のグラフを置き換える。

最終状態:

すべての差分商が計算され、最終的な補間多項式 p_n(x) がプロットされる。

補間誤差グラフが表示される。

3. 差分商の幾何学的解釈の可視化 (提案)

アニメーション中に、各階差分商の幾何学的な意味をグラフ上に示すことで、より深い理解を促す。

0階差分商 f[x_i]: 計算時に、対応する点 (x_i,f(x_i)) を赤く点滅させる。

1階差分商 f[x_i,x_i+1]: 計算時に、2点 (x_i,f(x_i)) と (x_i+1,f(x_i+1)) を結ぶ直線を赤色の破線で一時的に表示する。その傾きが差分商の値に対応することを示す。

2階差分商 f[x_i,x_i+1,x_i+2]: 計算時に、3点 (x_i,f(x_i)), (x_i+1,f(x_i+1)), (x_i+2,f(x_i+2)) を通る放物線を赤色の破線で一時的に表示する。この放物線の2次の係数が差分商の値に等しいことを示す。

3階以降: 幾何学的解釈が複雑になり、画面が煩雑になるため、3階以降は差分商表のハイライトのみに留めることを推奨する。

4. 技術スタック (推奨)

カテゴリ技術目的フロントエンド

React

動的なUI構築のため。

数式解析

math.js

文字列で入力された関数を安全に評価・実行するため。

グラフ描画

Chart.js or D3.js

関数の滑らかな描画と、動的な更新のため。

UIコンポーネント

MUI or Chakra UI

見栄えの良いスライダーやボタンを効率的に実装するため。

状態管理

React Context or Zustand

アプリケーション全体の状態（関数、パラメータ、アニメーションの進捗など）を管理するため。

5. 今後の拡張案

初期バージョンが完成した後、以下の機能を追加することで、さらに教育的な価値を高めることができる。

節点の種類の切り替え: チェビシェフ節点と等間隔節点を切り替えられるようにし、ルンゲ現象を再現・比較できるようにする。

スプライン補間との比較: 同じデータ点に対して3次スプライン補間を行った結果を並べて表示し、大域的補間と区分的補間の違いを比較できるようにする。

誤差評価指標の表示: 最大誤差 ∣f−p∣_infty や二乗平均平方根誤差（RMSE）などの数値を表示する。






関数のグラフと差分商表の間に現在の補間多項式を表示してください．展開する必要はないです．また，再生が終わったあとでも関数と補間多項式のグラフ領域に最終の補間多項式を残しておいてください．また，グラフのx軸の範囲，y軸の範囲は固定しておいてください．それに伴って，操作パネルにx軸の範囲，y軸の範囲を指定するものを追加してください





補間多項式のエリアが大きくなると再生，リセットボタンがどんどん下にいってしまいます．また，差分商表が潰れるので絶対に潰れないようにしてください．





補間多項式エリアに固定の高さを与えるという解決方法ではなく，画面全体が下にスクロールできるようになってほしい．
